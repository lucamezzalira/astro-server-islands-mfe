---
// Generate fake time-series data for the last 24 hours
const generateTimeSeriesData = () => {
  const data = [];
  const now = new Date();
  for (let i = 0; i < 24; i++) {
    const time = new Date(now);
    time.setHours(now.getHours() - (24 - i));
    
    data.push({
      time: time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      cpu: Math.floor(Math.random() * 40) + 40, // 40-80%
      memory: Math.floor(Math.random() * 25) + 60, // 60-85%
      disk: Math.floor(Math.random() * 20) + 30, // 30-50%
      network: Math.floor(Math.random() * 70) + 20, // 20-90%
    });
  }
  return data;
};

const timeSeriesData = generateTimeSeriesData();
---

<div class="system-health-details">
  <h2>System Resource Utilization</h2>
  <p>Historical data for the last 24 hours</p>
  
  <div class="chart-controls">
    <div class="control-buttons">
      <button id="cpuBtn" class="metric-button active" data-metric="cpu">CPU</button>
      <button id="memoryBtn" class="metric-button" data-metric="memory">Memory</button>
      <button id="diskBtn" class="metric-button" data-metric="disk">Disk</button>
      <button id="networkBtn" class="metric-button" data-metric="network">Network</button>
    </div>
  </div>
  
  <div class="chart-container">
    <canvas id="systemHealthChart"></canvas>
  </div>
  
  <div class="chart-legend">
    <div class="legend-item">
      <span class="legend-color cpu"></span>
      <span class="legend-label">CPU Utilization</span>
    </div>
    <div class="legend-item">
      <span class="legend-color memory"></span>
      <span class="legend-label">Memory Usage</span>
    </div>
    <div class="legend-item">
      <span class="legend-color disk"></span>
      <span class="legend-label">Disk I/O</span>
    </div>
    <div class="legend-item">
      <span class="legend-color network"></span>
      <span class="legend-label">Network Traffic</span>
    </div>
  </div>
</div>

<script is:inline define:vars={{ timeSeriesData }}>
  // Use the Chart object directly from the global scope (loaded via CDN)
  document.addEventListener('DOMContentLoaded', () => {
    // Set up chart data
    const labels = timeSeriesData.map(item => item.time);
    const datasets = [
      {
        label: 'CPU Utilization',
        data: timeSeriesData.map(item => item.cpu),
        borderColor: '#3b82f6',
        backgroundColor: 'rgba(59, 130, 246, 0.5)',
        tension: 0.3,
        hidden: false
      },
      {
        label: 'Memory Usage',
        data: timeSeriesData.map(item => item.memory),
        borderColor: '#8b5cf6',
        backgroundColor: 'rgba(139, 92, 246, 0.5)',
        tension: 0.3,
        hidden: true
      },
      {
        label: 'Disk I/O',
        data: timeSeriesData.map(item => item.disk),
        borderColor: '#ec4899',
        backgroundColor: 'rgba(236, 72, 153, 0.5)',
        tension: 0.3,
        hidden: true
      },
      {
        label: 'Network Traffic',
        data: timeSeriesData.map(item => item.network),
        borderColor: '#10b981',
        backgroundColor: 'rgba(16, 185, 129, 0.5)',
        tension: 0.3,
        hidden: true
      }
    ];
    
    // Initialize the chart
    const ctx = document.getElementById('systemHealthChart');
    if (!ctx) return;
    
    const chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels,
        datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            mode: 'index',
            intersect: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            title: {
              display: true,
              text: 'Utilization (%)'
            }
          },
          x: {
            title: {
              display: true,
              text: 'Time'
            }
          }
        }
      }
    });
    
    // Set up button event listeners
    const buttons = document.querySelectorAll('.metric-button');
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const metric = button.getAttribute('data-metric');
        
        // Update active button
        buttons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        // Show only the selected metric
        chart.data.datasets.forEach((dataset, index) => {
          const metricIndex = {
            'cpu': 0,
            'memory': 1,
            'disk': 2,
            'network': 3
          };
          
          dataset.hidden = index !== metricIndex[metric];
        });
        
        chart.update();
      });
    });
  });
</script>

<style>
  .system-health-details {
    padding: 2rem;
  }
  
  h2 {
    margin: 0;
    font-size: 1.5rem;
    color: #1f2937;
  }
  
  p {
    color: #6b7280;
    margin-top: 0.5rem;
    margin-bottom: 2rem;
  }
  
  .chart-controls {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 1.5rem;
  }
  
  .control-buttons {
    display: flex;
    gap: 0.5rem;
  }
  
  .metric-button {
    background-color: #f3f4f6;
    border: 1px solid #e5e7eb;
    border-radius: 4px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.2s ease;
  }
  
  .metric-button:hover {
    background-color: #e5e7eb;
  }
  
  .metric-button.active {
    background-color: #1f2937;
    color: white;
    border-color: #1f2937;
  }
  
  .chart-container {
    position: relative;
    height: 400px;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    background-color: white;
    margin-bottom: 1.5rem;
  }
  
  .chart-legend {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1.5rem;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .legend-color {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
  }
  
  .legend-color.cpu {
    background-color: #3b82f6;
  }
  
  .legend-color.memory {
    background-color: #8b5cf6;
  }
  
  .legend-color.disk {
    background-color: #ec4899;
  }
  
  .legend-color.network {
    background-color: #10b981;
  }
  
  .legend-label {
    font-size: 0.875rem;
    color: #4b5563;
  }
  
  @media (max-width: 768px) {
    .chart-controls {
      flex-direction: column;
      gap: 1rem;
    }
    
    .control-buttons {
      width: 100%;
      overflow-x: auto;
      padding-bottom: 0.5rem;
    }
  }
</style> 