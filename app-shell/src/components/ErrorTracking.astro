---
// This is a server island component
export const prerender = false;

// Simulated server-side data fetching with latency
const getErrorTrackingData = async () => {
  // Simulate network latency
  await new Promise(resolve => setTimeout(resolve, 250));
  
  // In a real implementation, this would fetch from error tracking service
  return {
    totalErrors: 12,
    criticalErrors: 2,
    resolvedToday: 8,
    lastChecked: new Date().toISOString(),
    recentErrors: [
      { id: 'ERR-1024', message: 'Database connection timeout', count: 4, severity: 'critical' },
      { id: 'ERR-1022', message: 'API rate limit exceeded', count: 7, severity: 'warning' },
      { id: 'ERR-1018', message: 'Invalid authentication token', count: 3, severity: 'warning' },
      { id: 'ERR-1015', message: 'Failed to process payment', count: 1, severity: 'critical' }
    ]
  };
};

// Start data fetching immediately but don't await it yet
const dataPromise = getErrorTrackingData();

// Then await the data when component renders
const errorData = await dataPromise;
---

<div class="island-tile error-tracking-tile">
  <h2>Error Tracking</h2>
  <div class="metrics">
    <div class="metric-row">
      <div class="metric-box">
        <div class="metric-label">Total Errors</div>
        <div class="metric-value">{errorData.totalErrors}</div>
      </div>
      <div class="metric-box">
        <div class="metric-label">Critical</div>
        <div class="metric-value critical">{errorData.criticalErrors}</div>
      </div>
      <div class="metric-box">
        <div class="metric-label">Resolved Today</div>
        <div class="metric-value resolved">{errorData.resolvedToday}</div>
      </div>
    </div>
  </div>
  
  <h3>Recent Errors</h3>
  <div class="errors-list">
    {errorData.recentErrors.map(error => (
      <div class="error-item severity-{error.severity}">
        <div class="error-header">
          <div class="error-id">{error.id}</div>
          <div class="error-count">Ã— {error.count}</div>
        </div>
        <div class="error-message">{error.message}</div>
      </div>
    ))}
  </div>
  
  <div class="last-updated">
    Last updated: {new Date(errorData.lastChecked).toLocaleString()}
    <span class="loading-note">(Loaded with simulated 250ms latency)</span>
  </div>
</div>

<style>
  .island-tile {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    height: 100%;
  }
  
  .error-tracking-tile {
    border-top: 4px solid var(--color-danger);
  }

  h2 {
    margin: 0 0 1rem 0;
    color: var(--color-text);
    font-size: var(--font-size-lg);
  }
  
  h3 {
    margin: 1.25rem 0 0.75rem 0;
    color: var(--color-text);
    font-size: 1.1rem;
  }

  .metrics {
    margin-bottom: 0.5rem;
  }
  
  .metric-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 0.75rem;
  }
  
  .metric-box {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 0.75rem;
    text-align: center;
  }
  
  .metric-label {
    color: var(--color-text-light);
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
  }
  
  .metric-value {
    font-weight: 600;
    font-size: 1.25rem;
    color: var(--color-text);
  }
  
  .metric-value.critical {
    color: var(--color-danger);
  }
  
  .metric-value.resolved {
    color: var(--color-success);
  }

  .errors-list {
    display: grid;
    gap: 0.5rem;
  }
  
  .error-item {
    padding: 0.75rem;
    background: #f8f9fa;
    border-radius: 4px;
    border-left: 4px solid #ddd;
  }
  
  .error-item.severity-critical {
    border-left-color: var(--color-danger);
  }
  
  .error-item.severity-warning {
    border-left-color: var(--color-warning);
  }
  
  .error-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .error-id {
    font-family: monospace;
    font-weight: 600;
    color: var(--color-text);
  }
  
  .error-count {
    background: #e2e8f0;
    border-radius: 12px;
    padding: 0.125rem 0.5rem;
    font-size: 0.875rem;
    color: var(--color-text-light);
  }
  
  .error-message {
    color: var(--color-text);
    font-size: 0.9375rem;
  }

  .last-updated {
    margin-top: 1rem;
    font-size: 0.875rem;
    color: var(--color-text-light);
    text-align: right;
  }
  
  .loading-note {
    font-style: italic;
    color: var(--color-text-light);
    opacity: 0.8;
  }
</style> 