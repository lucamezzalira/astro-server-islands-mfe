---
interface Props {
  endpoint: string;
}

const { endpoint } = Astro.props;

// Fetch the remote island with timeout and error handling
let islandContent;
let error = null;

try {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 3000);
  
  // Use node-fetch when running on the server to avoid fetch issues
  const response = await fetch(endpoint, { 
    signal: controller.signal,
    headers: {
      'Accept': 'text/html'
    }
  });
  
  clearTimeout(timeoutId);
  
  if (!response.ok) {
    throw new Error(`Failed to fetch island: ${response.status}`);
  }
  
  islandContent = await response.text();
  
  // Clean up the HTML by removing any <script> tags that reference local files
  if (islandContent) {
    // Simple regex to remove script tags pointing to local resources
    islandContent = islandContent.replace(/<script\s+type="module"\s+src="\/src\/.*?><\/script>/g, '');
  }
} catch (err: any) {
  error = err.message || String(err);
  console.error(`Failed to load remote island from ${endpoint}:`, err);
}
---

{error ? (
  <div class="island-fallback">
    <slot />
  </div>
) : (
  <Fragment set:html={islandContent} />
)}

<style>
  .island-fallback {
    width: 100%;
    height: 100%;
  }
</style> 