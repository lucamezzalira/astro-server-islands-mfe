---
// This is a server island component that can be loaded asynchronously
export const prerender = false;

// Simulated server-side data fetching with latency
const getApiLatencyData = async () => {
  // Simulate network latency (1 second)
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // In a real implementation, this would fetch from an API monitoring service
  return {
    avgLatency: '42ms',
    p95Latency: '78ms',
    p99Latency: '120ms',
    errorRate: '0.02%',
    lastChecked: new Date().toISOString(),
    endpoints: [
      { name: '/api/users', latency: '38ms', calls: '1.2K/min' },
      { name: '/api/products', latency: '56ms', calls: '850/min' },
      { name: '/api/orders', latency: '62ms', calls: '430/min' }
    ]
  };
};

// Start data fetching immediately but don't await it yet
const dataPromise = getApiLatencyData();

// Define a loading state
const initialState = {
  loading: true
};

// Then await the data when component renders
const latencyData = await dataPromise;
---

<div class="island-tile api-latency-tile">
  <h2>API Latency</h2>
  
  <div class="metrics">
    <div class="metric-row">
      <div class="metric-box">
        <div class="metric-label">Avg. Latency</div>
        <div class="metric-value">{latencyData.avgLatency}</div>
      </div>
      <div class="metric-box">
        <div class="metric-label">P95 Latency</div>
        <div class="metric-value">{latencyData.p95Latency}</div>
      </div>
      <div class="metric-box">
        <div class="metric-label">P99 Latency</div>
        <div class="metric-value">{latencyData.p99Latency}</div>
      </div>
      <div class="metric-box">
        <div class="metric-label">Error Rate</div>
        <div class="metric-value">{latencyData.errorRate}</div>
      </div>
    </div>
  </div>
  
  <h3>Top Endpoints</h3>
  <div class="endpoints">
    {latencyData.endpoints.map(endpoint => (
      <div class="endpoint-item">
        <div class="endpoint-name">{endpoint.name}</div>
        <div class="endpoint-metrics">
          <span class="endpoint-latency">{endpoint.latency}</span>
          <span class="endpoint-calls">{endpoint.calls}</span>
        </div>
      </div>
    ))}
  </div>
  
  <div class="last-updated">
    Last updated: {new Date(latencyData.lastChecked).toLocaleString()}
    <span class="loading-note">(Loaded with simulated 1s latency)</span>
  </div>
</div>

<style>
  .island-tile {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    height: 100%;
  }
  
  .api-latency-tile {
    border-top: 4px solid var(--color-secondary);
  }

  h2 {
    margin: 0 0 1rem 0;
    color: var(--color-text);
    font-size: var(--font-size-lg);
  }
  
  h3 {
    margin: 1.25rem 0 0.75rem 0;
    color: var(--color-text);
    font-size: 1.1rem;
  }

  .metrics {
    margin-bottom: 0.5rem;
  }
  
  .metric-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 0.75rem;
  }
  
  .metric-box {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 0.75rem;
    text-align: center;
  }
  
  .metric-label {
    color: var(--color-text-light);
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
  }
  
  .metric-value {
    font-weight: 600;
    font-size: 1.25rem;
    color: var(--color-text);
  }

  .endpoints {
    display: grid;
    gap: 0.5rem;
  }
  
  .endpoint-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: #f8f9fa;
    border-radius: 4px;
  }
  
  .endpoint-name {
    font-family: monospace;
    color: var(--color-text);
  }
  
  .endpoint-metrics {
    display: flex;
    gap: 1rem;
  }
  
  .endpoint-latency {
    color: var(--color-secondary);
    font-weight: 600;
  }
  
  .endpoint-calls {
    color: var(--color-text-light);
    font-size: 0.875rem;
  }

  .last-updated {
    margin-top: 1rem;
    font-size: 0.875rem;
    color: var(--color-text-light);
    text-align: right;
  }
  
  .loading-note {
    font-style: italic;
    color: var(--color-text-light);
    opacity: 0.8;
  }
</style> 